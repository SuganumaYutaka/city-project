/*==============================================================================

    Shape.cpp - 建物の自動生成ー形状
                                                       Author : Yutaka Suganuma
                                                       Date   : 2017/12/7
==============================================================================*/

/*------------------------------------------------------------------------------
	インクルードファイル
------------------------------------------------------------------------------*/
#include "Shape.h"
#include "Wall.h"
#include "Roof.h"
#include "DebugLog.h"

/*------------------------------------------------------------------------------
	デストラクタ
------------------------------------------------------------------------------*/
Shape::~Shape()
{
	Uninit();
}

/*------------------------------------------------------------------------------
	終了処理
------------------------------------------------------------------------------*/
void Shape::Uninit( void)
{
	//屋根の消去
	for (auto roof : m_Roofs)
	{
		delete roof;
	}
	m_Roofs.clear();

	//壁の消去
	for (auto wall : m_Walls)
	{
		delete wall;
	}
	m_Walls.clear();
}

/*------------------------------------------------------------------------------
	屋根の追加
------------------------------------------------------------------------------*/
void Shape::AddRoof(Roof* roof)
{
	m_Roofs.push_back( roof);
}

/*------------------------------------------------------------------------------
	屋根の削除
------------------------------------------------------------------------------*/
void Shape::SubRoof(Roof* roof)
{
	for (auto ite = m_Roofs.begin(); ite != m_Roofs.end(); ++ite)
	{
		if (*ite == roof)
		{
			delete roof;
			m_Roofs.erase( ite);
			return;
		}
	}

	DebugLog::Add( "ShapeにRoofが見つからない\n");
}

/*------------------------------------------------------------------------------
	壁の追加
------------------------------------------------------------------------------*/
void Shape::AddWall( Wall* wall)
{ 
	m_Walls.push_back( wall);
}

/*------------------------------------------------------------------------------
	壁の削除
------------------------------------------------------------------------------*/
void Shape::SubWall( Wall* wall)
{ 
	for (auto ite = m_Walls.begin(); ite != m_Walls.end(); ++ite)
	{
		if (*ite == wall)
		{
			wall->ClearRenderer();
			delete wall;
			m_Walls.erase( ite);
			return;
		}
	}

	DebugLog::Add( "ShapeにWallが見つからない\n");
}

/*------------------------------------------------------------------------------
	壁のクリア
------------------------------------------------------------------------------*/
void Shape::ClearWall( void)
{ 
	//壁の消去
	for (auto ite = m_Walls.begin(); ite != m_Walls.end(); ++ite)
	{
		(*ite)->ClearRenderer();
		delete *ite;
	}

	m_Walls.clear();
}

/*------------------------------------------------------------------------------
	壁の描画コンポーネントのクリア
------------------------------------------------------------------------------*/
void Shape::ClearWallRenderer( void)
{ 
	for (auto wall : m_Walls)
	{
		wall->ClearRenderer();
	}
}

/*------------------------------------------------------------------------------
	マトリクスの取得
------------------------------------------------------------------------------*/
D3DXMATRIX Shape::GetMatrix(void)
{
	D3DXMATRIX mtxRot, mtxPos;
	D3DXMatrixTranslation( &mtxPos, m_Position.x, m_Position.y, m_Position.z);
	D3DXMatrixRotationY( &mtxRot, m_Rotation);

	return mtxRot * mtxPos;
}

/*------------------------------------------------------------------------------
	描画の更新
------------------------------------------------------------------------------*/
void Shape::UpdateView(void)
{
	D3DXMATRIX matrix;
	D3DXMatrixIdentity( &matrix);	

	for (auto wall : m_Walls)
	{
		//描画情報の更新
		wall->UpdateView( matrix);
	}
}

/*------------------------------------------------------------------------------
	裂け目の設定処理
------------------------------------------------------------------------------*/
void Shape::Split(Shape* other)
{
	//壁が交差するところに裂け目を設定
	auto otherWalls = other->GetWalls();
	for (auto wall1 : m_Walls)
	{
		for (auto wall2 : otherWalls)
		{
			//裂け目設定処理
			wall1->Split( wall2);
		}
	}
}

/*------------------------------------------------------------------------------
	フロアの先頭タイルを取得
------------------------------------------------------------------------------*/
Tile* Shape::GetStartTile(int floorCount)
{
	auto floors = m_Walls.front()->GetFloors();
	
	//フロアの階数をチェック
	int size = floors.size();
	if (size  <= floorCount)
	{
		return NULL;
	}

	//壁からタイルを取得
	auto tile = m_Walls.front()->GetStartTile( floorCount);

	return tile;
}

/*------------------------------------------------------------------------------
	一番上のタイルを取得
------------------------------------------------------------------------------*/
Tile* Shape::GetTopTile(void)
{
	return m_Walls.front()->GetTopTile();
}

/*------------------------------------------------------------------------------
	フロア数を取得
------------------------------------------------------------------------------*/
int Shape::GetFloorCount(void)
{
	return (int)m_Walls.front()->GetFloors().size();
}
